import { createAsyncThunk, createEntityAdapter, createSlice } from '@reduxjs/toolkit';
import { addConsent, fetchConsents } from './consentsAPI';

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const addConsentAsync = createAsyncThunk(
  'consent/addConsent',
  async (consent) => {
    const response = await addConsent(consent);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const fetchConsentsAsync = createAsyncThunk(
  'consent/fetchConsents',
  async () => {
    const response = await fetchConsents();
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

const consentsAdapter = createEntityAdapter()
const initialState = consentsAdapter.getInitialState();

export const consentsSlice = createSlice({
  name: 'consents',
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(addConsentAsync.fulfilled, (state, action) => {
        consentsAdapter.upsertOne(state, action.payload)
      })
      .addCase(fetchConsentsAsync.fulfilled, (state, action) => {
        consentsAdapter.setAll(state, action.payload)
      });
  },
});


// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file.
export const { selectAll: selectAllConsents } = consentsAdapter.getSelectors((state) => state.consents);

export default consentsSlice.reducer;
